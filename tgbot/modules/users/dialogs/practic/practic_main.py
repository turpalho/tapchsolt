from typing import Any, Dict

from aiogram import Bot, types
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.text import Format
from aiogram_i18n import I18nContext

from langchain_core.messages import AIMessage, HumanMessage
from langchain_community.chat_message_histories import ChatMessageHistory


# from services.broadcaster import broadcast_media_group, broadcast_plus
from tgbot.services.api_manager import GoogleClient
from tgbot.config import Config
from tgbot.helpers.utils import get_ai_system_message
from tgbot.modules.common.buttons import back_btn, close_dialog_back_btn
from .states import PracticState


async def on_start(data, dialog_manager: DialogManager):
    config: Config = dialog_manager.middleware_data.get("config")
    system_message = get_ai_system_message()

    google_client = GoogleClient(api_key=config.tg_bot.gemini_api_key,
                                 system_message=system_message)

    dialog_manager.dialog_data["google_client"] = google_client


async def data_getter(dialog_manager: DialogManager,
                      i18n: I18nContext,
                      **_kwargs) -> Dict[str, Any | None]:

    _ = i18n.get
    tapchsolt_answer = dialog_manager.dialog_data.get(
        "tapchsolt_answer", _('start_dialog'))

    return {
        "dialog_message": tapchsolt_answer,
        "back_btn": _("back_btn")
    }


async def get_ai_answer(message: types.Message,
                        message_input: MessageInput,
                        dialog_manager: DialogManager) -> None:
    bot: Bot = dialog_manager.middleware_data.get("bot")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "typing"
    await bot.send_chat_action(
        chat_id=message.chat.id,
        action="typing"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    thinking_message = await bot.send_message(
        chat_id=message.chat.id,
        text="üß† –û–π–ª–∞ –π–µ—à –≤—É..."
    )

    try:
        chat_history: ChatMessageHistory = dialog_manager.dialog_data.get(
            "chat_history", None)
        if not chat_history:
            chat_history = ChatMessageHistory()

        user_message = message.text
        chat_history.add_user_message(
            HumanMessage(
                content=user_message
            )
        )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π (20 –æ–±—ä–µ–∫—Ç–æ–≤: 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + 10 –ò–ò)
        if len(chat_history.messages) > 20:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
            chat_history.messages = chat_history.messages[-20:]

        google_client: GoogleClient = dialog_manager.dialog_data["google_client"]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º thinking progress —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        final_answer = None
        async for thinking_update in google_client.async_get_response_with_thinking(chat_history.messages):
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –º—ã—à–ª–µ–Ω–∏—è
            try:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=thinking_message.message_id,
                    text=thinking_update
                )
            except Exception as edit_error:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ç—É—Å –º—ã—à–ª–µ–Ω–∏—è (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å üß†), –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if not thinking_update.startswith("üß†"):
                final_answer = thinking_update
                break

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å thinking –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        try:
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=thinking_message.message_id
            )
        except Exception:
            # –ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass

        if final_answer and not final_answer.startswith("‚ùå"):
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç AIMessage –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            from langchain_core.messages import AIMessage
            ai_message = AIMessage(content=final_answer)
            chat_history.add_ai_message(ai_message)
            dialog_manager.dialog_data["chat_history"] = chat_history

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        dialog_manager.dialog_data["tapchsolt_answer"] = final_answer or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"

    except Exception as e:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å thinking —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=thinking_message.message_id
            )
        except Exception:
            pass

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        import traceback
        error_details = traceback.format_exc()
        print(f"–û—à–∏–±–∫–∞ –≤ get_ai_answer: {error_details}")  # –î–ª—è –∫–æ–Ω—Å–æ–ª–∏

        error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        dialog_manager.dialog_data["tapchsolt_answer"] = error_message


practic_main_dialog = Dialog(
    Window(
        Format(text="{dialog_message}"),
        MessageInput(func=get_ai_answer,
                     content_types=types.ContentType.TEXT),
        close_dialog_back_btn,
        state=PracticState.START,
    ),
    on_start=on_start,
    getter=data_getter,
)
