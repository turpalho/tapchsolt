from typing import Any, AsyncGenerator
import requests
import logging
import asyncio

from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from openai import AsyncOpenAI
from openai.types.chat import ChatCompletionMessage
from langchain_google_genai import ChatGoogleGenerativeAI

logger = logging.getLogger(__name__)


class OpenaiClient:
    def __init__(self, api_key: str, system_message: str):
        self.client: ChatOpenAI = ChatOpenAI(model="gpt-3.5-turbo")
        self.async_client: AsyncOpenAI = AsyncOpenAI(api_key=api_key)
        self.system_message = system_message

    async def async_get_response(self, messages: list):

        prompt = ChatPromptTemplate.from_messages(
            [
                (
                    "system",
                    self.system_message,
                ),
                MessagesPlaceholder(variable_name="messages"),
            ]
        )

        chain = prompt | self.client

        completion = await chain.ainvoke(
            {"messages": messages, }
        )
        return completion

    # # TODO create async openai client
    # async def async_get_response(self, messages: list) -> ChatCompletionMessage:
    #     completion = await self.async_client.chat.completions.create(
    #         model='gpt-3.5-turbo',
    #         messages=messages
    #     )
    #     return completion.choices[0].message


class GoogleClient:
    def __init__(self, api_key: str, system_message: str):
        self.client: ChatGoogleGenerativeAI = ChatGoogleGenerativeAI(
            api_key=api_key,
            # model="gemini-2.5-pro",
            model="gemini-2.5-flash",
            temperature=1,
            max_tokens=512,
            timeout=None,
            max_retries=2,
            # –ü—Ä–æ–±—É–µ–º –≤–∫–ª—é—á–∏—Ç—å thinking mode
            # thinking_mode=True,  # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        )
        self.system_message = system_message

    async def async_get_response(self, messages: list):
        try:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini API —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            logger.debug(
                f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.system_message[:100]}...")

            prompt = ChatPromptTemplate.from_messages(
                [
                    (
                        "system",
                        self.system_message,
                    ),
                    MessagesPlaceholder(variable_name="messages"),
                ]
            )

            chain = prompt | self.client

            completion = await chain.ainvoke(
                {"messages": messages, }
            )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
            logger.debug(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(completion)}")
            logger.debug(f"–û—Ç–≤–µ—Ç —Ü–µ–ª–∏–∫–æ–º: {completion}")

            if hasattr(completion, 'content'):
                logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: '{completion.content}'")
                logger.debug(
                    f"–î–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(completion.content) if completion.content else 0}")
            else:
                logger.warning("–£ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'content'")
                logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {dir(completion)}")

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
            if not completion:
                raise ValueError("–ò–ò –≤–µ—Ä–Ω—É–ª None")

            if not hasattr(completion, 'content'):
                raise ValueError("–£ –æ—Ç–≤–µ—Ç–∞ –ò–ò –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'content'")

            if completion.content is None:
                raise ValueError("–ò–ò –≤–µ—Ä–Ω—É–ª content = None")

            if completion.content.strip() == "":
                raise ValueError("–ò–ò –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")

            logger.info(
                f"–û—Ç–≤–µ—Ç –ò–ò —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(completion.content)}")
            return completion

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            raise

    async def async_get_response_with_thinking(self, messages: list) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π thinking progress
        """
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ thinking mode –¥–ª—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –§–∞–∑—ã –º—ã—à–ª–µ–Ω–∏—è –Ω–∞ —á–µ—á–µ–Ω—Å–∫–æ–º
            thinking_phases = [
                "–û–π–ª–∞ –π–µ—à –≤—É...",  # –î—É–º–∞—é...
                "–ê–Ω–∞–ª–∏–∑ –π—É –π–æ—å–¥—É—à...",  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
                "–ñ–æ–ø –≤–æ–≤—à–∞—Ö —Ç—É—Ö—É—à –≤—É...",  # –§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç...
                "–ö–µ—á–∞–º –±–∏–Ω–∞ –≤–æ–ª—É—à –ª–∞—å—Ç—Ç–∞...",  # –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...
            ]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∑—ã –º—ã—à–ª–µ–Ω–∏—è
            for i, phase in enumerate(thinking_phases):
                yield f"üß† {phase}"
                # –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 0.5 –¥–æ 2 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(0.5 + (i * 0.3))

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            prompt = ChatPromptTemplate.from_messages(
                [
                    (
                        "system",
                        self.system_message,
                    ),
                    MessagesPlaceholder(variable_name="messages"),
                ]
            )

            chain = prompt | self.client
            completion = await chain.ainvoke({"messages": messages})

            if not completion or not hasattr(completion, 'content') or not completion.content or completion.content.strip() == "":
                yield "‚ùå –ò–ò —Ü—Ö—å–∞ –∞ –∂–æ–ø —Ü–∞ –¥–µ–ª–ª–∞"
                return

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            yield completion.content

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ thinking mode: {e}")
            yield f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
