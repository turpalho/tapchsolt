from typing import Any, AsyncGenerator
import requests
import logging
import asyncio

from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from openai import AsyncOpenAI
from openai.types.chat import ChatCompletionMessage
from langchain_google_genai import ChatGoogleGenerativeAI

logger = logging.getLogger(__name__)


class OpenaiClient:
    def __init__(self, api_key: str, system_message: str):
        self.client: ChatOpenAI = ChatOpenAI(model="gpt-3.5-turbo")
        self.async_client: AsyncOpenAI = AsyncOpenAI(api_key=api_key)
        self.system_message = system_message

    async def async_get_response(self, messages: list):

        prompt = ChatPromptTemplate.from_messages(
            [
                (
                    "system",
                    self.system_message,
                ),
                MessagesPlaceholder(variable_name="messages"),
            ]
        )

        chain = prompt | self.client

        completion = await chain.ainvoke(
            {"messages": messages, }
        )
        return completion

    # # TODO create async openai client
    # async def async_get_response(self, messages: list) -> ChatCompletionMessage:
    #     completion = await self.async_client.chat.completions.create(
    #         model='gpt-3.5-turbo',
    #         messages=messages
    #     )
    #     return completion.choices[0].message


class GoogleClient:
    def __init__(self, api_key: str, system_message: str, proxy_url: str = None):
        import os

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–∫—Å–∏, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if proxy_url:
            logger.info(f"–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini API —Å –ø—Ä–æ–∫—Å–∏: {proxy_url}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
            if proxy_url.startswith('https://'):
                logger.warning(
                    "‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç https://, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è http://")
                logger.warning("–ü—Ä–∏–º–µ—Ä: PROXY_URL=http://23.237.210.82:80")
            elif proxy_url.startswith('socks5://'):
                logger.info("üßÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω SOCKS5 –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Tor)")
            elif proxy_url.startswith('socks4://'):
                logger.info("üîå –û–±–Ω–∞—Ä—É–∂–µ–Ω SOCKS4 –ø—Ä–æ–∫—Å–∏")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—Å–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç–∞–º (–≤–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LangChain) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
            os.environ['HTTP_PROXY'] = proxy_url
            os.environ['HTTPS_PROXY'] = proxy_url
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏—â—É—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            os.environ['http_proxy'] = proxy_url
            os.environ['https_proxy'] = proxy_url

            # –î–ª—è SOCKS –ø—Ä–æ–∫—Å–∏ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ALL_PROXY
            if proxy_url.startswith(('socks4://', 'socks5://')):
                os.environ['ALL_PROXY'] = proxy_url
                os.environ['all_proxy'] = proxy_url

            logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            logger.info("Gemini API –±–µ–∑ –ø—Ä–æ–∫—Å–∏")

        self.client: ChatGoogleGenerativeAI = ChatGoogleGenerativeAI(
            api_key=api_key,
            # model="gemini-2.5-pro",
            model="gemini-2.5-flash",
            temperature=1,
            max_tokens=4096,
            timeout=None,
            max_retries=2,
            # –ü—Ä–æ–±—É–µ–º –≤–∫–ª—é—á–∏—Ç—å thinking mode
            # thinking_mode=True,  # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        )
        self.system_message = system_message

    async def test_proxy_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        """
        import httpx
        import os

        proxy_url = os.environ.get(
            'HTTPS_PROXY') or os.environ.get('HTTP_PROXY')

        if not proxy_url:
            logger.info("üîç –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return True

        try:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {proxy_url}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —Å –ø—Ä–æ—Å—Ç—ã–º HTTP –∑–∞–ø—Ä–æ—Å–æ–º
            async with httpx.AsyncClient(proxy=proxy_url, timeout=10.0) as client:
                response = await client.get("https://httpbin.org/ip")

                if response.status_code == 200:
                    ip_info = response.json()
                    logger.info(
                        f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–Ω–µ—à–Ω–∏–π IP: {ip_info.get('origin', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                    return True
                else:
                    logger.error(f"‚ùå –ü—Ä–æ–∫—Å–∏ –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                    return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if "ConnectTimeout" in str(e) or "timeout" in str(e).lower():
                logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            elif "ConnectError" in str(e) or "connection" in str(e).lower():
                logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            elif "ProxyError" in str(e):
                logger.error("üö´ –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            else:
                logger.error(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å PROXY_URL –≤ .env —Ñ–∞–π–ª–µ")
            return False

    async def async_get_response(self, messages: list):
        try:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini API —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            logger.debug(
                f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.system_message[:100]}...")

            prompt = ChatPromptTemplate.from_messages(
                [
                    (
                        "system",
                        self.system_message,
                    ),
                    MessagesPlaceholder(variable_name="messages"),
                ]
            )

            chain = prompt | self.client

            completion = await chain.ainvoke(
                {"messages": messages, }
            )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
            logger.debug(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(completion)}")
            logger.debug(f"–û—Ç–≤–µ—Ç —Ü–µ–ª–∏–∫–æ–º: {completion}")

            if hasattr(completion, 'content'):
                logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: '{completion.content}'")
                logger.debug(
                    f"–î–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {len(completion.content) if completion.content else 0}")
            else:
                logger.warning("–£ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'content'")
                logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {dir(completion)}")

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
            if not completion:
                raise ValueError("–ò–ò –≤–µ—Ä–Ω—É–ª None")

            if not hasattr(completion, 'content'):
                raise ValueError("–£ –æ—Ç–≤–µ—Ç–∞ –ò–ò –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'content'")

            if completion.content is None:
                raise ValueError("–ò–ò –≤–µ—Ä–Ω—É–ª content = None")

            if completion.content.strip() == "":
                raise ValueError("–ò–ò –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")

            logger.info(
                f"–û—Ç–≤–µ—Ç –ò–ò —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(completion.content)}")
            return completion

        except Exception as e:
            error_message = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API: {error_message}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if "User location is not supported for the API use" in error_message:
                logger.error("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Gemini API!")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                proxy_working = await self.test_proxy_connection()

                if not proxy_working:
                    logger.error(
                        "üí° –†–µ—à–µ–Ω–∏–µ: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –≤ .env —Ñ–∞–π–ª–µ")
                    logger.error(
                        "–ü—Ä–∏–º–µ—Ä: PROXY_URL=http://username:password@proxy-server:port")
                    raise Exception(
                        "Geoblocking detected and proxy not working. Fix PROXY_URL in .env file. Example: PROXY_URL=http://user:pass@proxy:port")
                else:
                    logger.error(
                        "ü§î –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞")
                    logger.error(
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
                    raise Exception(
                        "Geoblocking detected despite working proxy. Try proxy from supported region.")

            raise

    async def async_get_response_with_thinking(self, messages: list) -> AsyncGenerator[str, None]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π thinking progress
        """
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ thinking mode –¥–ª—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –§–∞–∑—ã –º—ã—à–ª–µ–Ω–∏—è –Ω–∞ —á–µ—á–µ–Ω—Å–∫–æ–º
            thinking_phases = [
                "–û–π–ª–∞ –π–µ—à –≤—É...",  # –î—É–º–∞—é...
                "–ê–Ω–∞–ª–∏–∑ –π—É –π–æ—å–¥—É—à...",  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
                "–ñ–æ–ø –≤–æ–≤—à–∞—Ö —Ç—É—Ö—É—à –≤—É...",  # –§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç...
                "–ö–µ—á–∞–º –±–∏–Ω–∞ –≤–æ–ª—É—à –ª–∞—å—Ç—Ç–∞...",  # –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...
            ]

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∑—ã –º—ã—à–ª–µ–Ω–∏—è
            for i, phase in enumerate(thinking_phases):
                yield f"üß† {phase}"
                # –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 0.5 –¥–æ 2 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(0.5 + (i * 0.3))

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            prompt = ChatPromptTemplate.from_messages(
                [
                    (
                        "system",
                        self.system_message,
                    ),
                    MessagesPlaceholder(variable_name="messages"),
                ]
            )

            chain = prompt | self.client
            completion = await chain.ainvoke({"messages": messages})

            if not completion or not hasattr(completion, 'content') or not completion.content or completion.content.strip() == "":
                yield "‚ùå –ò–ò —Ü—Ö—å–∞ –∞ –∂–æ–ø —Ü–∞ –¥–µ–ª–ª–∞"
                return

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            yield completion.content

        except Exception as e:
            error_message = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ thinking mode: {error_message}")

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if "User location is not supported for the API use" in error_message:
                logger.error("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Gemini API!")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                try:
                    proxy_working = await self.test_proxy_connection()
                    if not proxy_working:
                        yield "‚ùå –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø—Ä–∞–≤—å—Ç–µ PROXY_URL –≤ .env —Ñ–∞–π–ª–µ"
                    else:
                        yield "‚ùå –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"
                except:
                    yield "‚ùå –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –î–æ–±–∞–≤—å—Ç–µ PROXY_URL –≤ .env —Ñ–∞–π–ª. –ü—Ä–∏–º–µ—Ä: PROXY_URL=http://user:pass@proxy:port"

            elif "Geoblocking detected" in error_message:
                yield "‚ùå –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"
            else:
                yield f"‚ùå –û—à–∏–±–∫–∞: {error_message}"
